{"version":3,"sources":["components/Idea.js","components/IdeaForm.js","components/IdeasContainer.js","App.js","serviceWorker.js","index.js"],"names":["Idea","handleClick","_this","props","onClick","idea","id","react_default","a","createElement","className","this","title","body","Component","IdeaForm","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleInput","e","resetNotification","setState","defineProperty","target","name","value","handleBlur","state","axios","put","concat","then","response","console","log","updateIdea","data","catch","error","onBlur","type","placeholder","onChange","IdeasContainer","addNewIdea","post","ideas","update","$splice","editingIdeaId","ideaIndex","findIndex","x","$set","notification","enableEditing","_this2","get","_this3","map","components_IdeaForm","key","components_Idea","App","components_IdeasContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fae02db2.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Idea extends Component {\n\n  handleClick = () => {\n    this.props.onClick(this.props.idea.id)\n  }\n\n  render () {\n    return(\n      <div className=\"tile\">\n        <h4 onClick={this.handleClick}>\n          {this.props.idea.title}\n        </h4>\n        <p onClick={this.handleClick}>\n          {this.props.idea.body}\n        </p>\n      </div>\n    )\n  }\n}\n\nexport default Idea","import React, { Component } from 'react'\nimport axios from 'axios'\n\nclass IdeaForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      title: this.props.idea.title,\n      body: this.props.idea.body\n    }\n  }\n\n  handleInput = (e) => {\n    this.props.resetNotification()\n    this.setState({[e.target.name]: e.target.value})\n  }\n\n  handleBlur = () => {\n    const idea = {\n      title: this.state.title,\n      body: this.state.body\n    }\n\n    axios.put(\n      `http://localhost:3001/api/v1/ideas/${this.props.idea.id}`,\n      {\n        idea: idea\n      })\n    .then(response => {\n      console.log(response)\n      this.props.updateIdea(response.data)\n    })\n    .catch(error => console.log(error))\n  }\n\n  render() {\n    return (\n      <div className=\"tile\">\n        <form onBlur={this.handleBlur} >\n          <input className='input' type=\"text\"\n            name=\"title\" placeholder='Enter a Title'\n            value={this.state.title} onChange={this.handleInput} />\n          <textarea className='input' name=\"body\"\n            placeholder='Describe your idea'\n            value={this.state.body} onChange={this.handleInput}>\n          </textarea>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default IdeaForm","import React, { Component } from 'react'\nimport axios from 'axios'\nimport Idea from './Idea'\nimport update from 'immutability-helper'\nimport IdeaForm from './IdeaForm'\n\nclass IdeasContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ideas: [],\n      editingIdeaId: null,\n      notification: ''\n    }\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:3001/api/v1/ideas.json')\n    .then(response => {\n      console.log(response)\n      this.setState({ideas: response.data})\n    })\n    .catch(error => console.log(error))\n  }\n\n  addNewIdea = () => {\n    axios.post(\n      'http://localhost:3001/api/v1/ideas',\n      {\n        idea: {\n          title: '',\n          body: ''\n        }\n      }\n    )\n    .then(response => {\n      console.log(response)\n      const ideas = update(this.state.ideas, {\n        $splice: [[0, 0, response.data]]\n      })\n      this.setState({\n        ideas: ideas,\n        editingIdeaId: response.data.id\n      })\n    })\n    .catch(error => console.log(error))\n  }\n\n  updateIdea = (idea) => {\n    const ideaIndex = this.state.ideas.findIndex(x => x.id === idea.id)\n    const ideas = update(this.state.ideas, {\n      [ideaIndex]: { $set: idea }\n    })\n    this.setState({\n      ideas: ideas,\n      notification: 'All changes saved'\n    })\n  }\n\n  resetNotification = () => {\n    this.setState({notification: ''})\n  }\n\n  enableEditing = (id) => {\n    this.setState({editingIdeaId: id})\n  }\n\n  render() {\n    return (\n      <div>\n        <button className=\"newIdeaButton\"\n          onClick={this.addNewIdea}>\n          New Idea\n        </button>\n        <span className=\"notification\">\n          {this.state.notification}\n        </span>\n        <br />\n        {this.state.ideas.map((idea) => {\n          if(this.state.editingIdeaId === idea.id) {\n            return (<IdeaForm idea={idea} key={idea.id}\n              updateIdea={this.updateIdea}\n              resetNotification={this.resetNotification} />)\n          } else {\n            return (<Idea idea={idea} key={idea.id} onClick={this.enableEditing} />)\n          }\n        })}\n      </div>\n    )\n  }\t\n}\n\nexport default IdeasContainer;","import React, { Component } from 'react';\nimport './App.css';\nimport IdeasContainer from './components/IdeasContainer'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h1>Idea Board</h1>\n        </div>\n        <br/>\n        <IdeasContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}